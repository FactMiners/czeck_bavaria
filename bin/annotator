#!/usr/bin/env python
import json
import random
import string
import cherrypy #also routes are needed
import sys
import glob
import re
import os
import hashlib
import jinja2



# Template parameters
# id: md5sum
# previous_id: md5sum
# next_id: md5sum
client_jinja_template="""<!doctype html>
<html>
<head>
<meta charset="UTF-8" />
<title>Canvas Layers Test</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script>
        var rectangles_ltrb = [];
        var captions = [];
        var deleted_rectangles_ltrb = [];
        var deleted_captions = [];
        var active_box=-1;
        $(document).ready(function(){
            $.when($.ajax("/{{id}}.json")).then(function(data,textStatus,jqXHR){
                alert("data"+data);
                console.log(data);
                //var initial_data=JSON.parse(data);

                rectangles_ltrb=data[0];
                rectangles_ltrb=data.rectangles_ltrb;
                captions=data[1];
                captions=data.captions;
                console.log(captions);
                draw_boxes();
            });

            var caption_prefix=document.getElementById("CaptionPrefix").innerHTML;
            var img_id="{{id}}";
            var layer_image=$('#layer_image')[0];
            var layer_boxes=$('#layer_boxes')[0];
            var layer_active=$('#layer_active')[0];
            var layer_interactive=$('#layer_active')[0];
            var ctx_image;
            var ctx_boxes;
            var ctx_active;
            var ctx_interactive;
            var img = new Image();



            var begin_x=-1;
            var begin_y=-1;

            function draw_image() {
                ctx_image.clearRect(0, 0, img.width, img.height);
                ctx_image.drawImage(img, 0, 0,img.width,img.height);
            }

            function select_by_coordinates(xy){
                active_box=-1;
                for(var n = 0; n<rectangles_ltrb.length;n++){
                    var ltrb=rectangles_ltrb[n];
                    if(ltrb[0]<xy[0] && ltrb[2]>xy[0] && ltrb[1]<xy[1] && ltrb[3]>xy[1] ){
                        active_box=n;
                    }else{
                        var a=1;
                    }
                }
            }

            function upload_rectangles_captions(){
                var xhr = new XMLHttpRequest();
                var url = "/{{id}}.json";
                xhr.open("PUT", url, true);
                xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
                //xhr.onreadystatechange = function () {}; # Was here from POST example
                var data = JSON.stringify({"rectangles_ltrb":rectangles_ltrb,"captions":captions});
                xhr.send(data);
            }


            function draw_boxes() {
                if (rectangles_ltrb.length>0){
                    ctx_boxes.fillStyle = "#0000FF";
                    ctx_boxes.globalAlpha = 0.2;
                    ctx_boxes.clearRect(0, 0, img.width, img.height);
                    for(var n=0;n<rectangles_ltrb.length;n++){
                        ctx_boxes.fillRect(rectangles_ltrb[n][0], rectangles_ltrb[n][1], rectangles_ltrb[n][2]-rectangles_ltrb[n][0], rectangles_ltrb[n][3]-rectangles_ltrb[n][1]);
                    }
                    ctx_boxes.globalAlpha = 1.0;
                    ctx_boxes.lineWidth="2";
                    for(var n=0;n<rectangles_ltrb.length;n++){
                        ctx_boxes.rect(rectangles_ltrb[n][0], rectangles_ltrb[n][1], rectangles_ltrb[n][2]-rectangles_ltrb[n][0], rectangles_ltrb[n][3]-rectangles_ltrb[n][1]);
                    }
                    ctx_boxes.font = '18pt Calibri';
                    for(var n=0;n<rectangles_ltrb.length;n++){
                        ctx_boxes.fillText(captions[n], rectangles_ltrb[n][0], rectangles_ltrb[n][1]);
                    }
                }else{
                    ctx_boxes.clearRect(0, 0, img.width, img.height);
                }
            }

            function draw_active() {
                ctx_active.clearRect(0, 0, img.width, img.height);
                if(active_box>=0){
                    var ltrb=rectangles_ltrb[active_box];
                    ctx_active.beginPath();
                    ctx_active.lineWidth="4";
                    ctx_active.strokeStyle="green";
                    ctx_active.rect(ltrb[0], ltrb[1], ltrb[2]-ltrb[0], ltrb[3]-ltrb[1]);
                    ctx_active.stroke();
                }
            }

            img.onload = function () {
                layer_image=$('#layer_image')[0]
                layer_boxes=$('#layer_boxes')[0]
                layer_active=$('#layer_active')[0]
                layer_interactive=$('#layer_interactive')[0]

                layer_image.width=img.width
                layer_image.height=img.height

                layer_boxes.width=img.width
                layer_boxes.height=img.height

                layer_active.width=img.width
                layer_active.height=img.height

                layer_interactive.width=img.width
                layer_interactive.height=img.height

                ctx_image=layer_image.getContext("2d");
                ctx_boxes=layer_boxes.getContext("2d");
                ctx_active=layer_active.getContext("2d");
                ctx_interactive=layer_interactive.getContext("2d");

                ctx_boxes.fillStyle = "#0000FF";
                ctx_interactive.fillStyle = "#FF00FF";
                ctx_interactive.globalAlpha = .2;

                draw_image();
                draw_boxes();

                function writeMessage(canvas, message) {
                    var context = canvas.getContext('2d');
                    ctx_interactive.clearRect(0, 0, canvas.width, canvas.height);
                    ctx_interactive.font = '18pt Calibri';
                    ctx_interactive.fillStyle = 'black';
                    ctx_interactive.fillText(message, 0, 25);
                }

                function getMousePos(canvas, evt) {
                    var rect = canvas.getBoundingClientRect();
                    return {
                        x: evt.clientX - rect.left,
                        y: evt.clientY - rect.top
                    };
                }

                layer_interactive.addEventListener('mousedown', function(evt) {
                    var mousePos = getMousePos(layer_interactive, evt);
                    begin_x=mousePos.x;
                    begin_y=mousePos.y;

                }, false);

                layer_interactive.addEventListener('mouseup', function(evt) {
                    var mousePos = getMousePos(layer_interactive, evt);
                    var l=Math.round(Math.min(mousePos.x,begin_x));
                    var t=Math.round(Math.min(mousePos.y,begin_y));
                    var r=Math.round(Math.max(mousePos.x,begin_x));
                    var b=Math.round(Math.max(mousePos.y,begin_y));
                    if((r-l)*(b-t)>25){
                        active_box=rectangles_ltrb.push([l,t,r,b])-1;
                        //captions.push(caption_prefix);
                        captions.push(caption_prefix+"@");
                        draw_boxes();
                        draw_active();
                        upload_rectangles_captions();
                    }else{
                        select_by_coordinates([(l+r)/2,(t+b)/2]);
                        draw_active();
                    }
                    begin_x=-1
                    begin_y=-1
                    ctx_interactive.clearRect(0,0,img.width,img.height);
                }, false);

                layer_interactive.addEventListener('mousemove', function(evt) {
                    var mousePos = getMousePos(layer_interactive, evt);
                    if (begin_x>0 && begin_y>0){
                        ctx_interactive.clearRect(0,0,img.width,img.height);
                        ctx_interactive.fillRect(begin_x,begin_y,mousePos.x-begin_x,mousePos.y-begin_y);
                    }
                }, false);

                document.addEventListener("keypress", function(evt) {
                    switch(evt.keyCode){
                        case 13: //enter -> edit caption
                            if(active_box>=0){
                                var current_caption=(captions[active_box]+"@").split("@")[1];
                                captions[active_box]=caption_prefix+"@"+window.prompt("Caption",current_caption);
                                draw_boxes();
                            }else{
                                alert("No object selected");
                            }
                            break;
                        case 101: //e -> edit next caption
                            if(active_box>=0){
                                draw_boxes();
                                active_box+=1;
                                active_box=active_box%rectangles_ltrb.length;
                                var current_caption=(captions[active_box]+"@").split("@")[1];
                                captions[active_box]=caption_prefix+"@"+window.prompt("Caption",current_caption);
                                draw_boxes();
                            }else{
                                alert("No object selected");
                            }
                            break;                        
                        case 110: //n -> next
                            active_box+=1;
                            active_box=active_box%rectangles_ltrb.length;
                            draw_active();
                            break;
                        case 112: //p -> next
                            active_box+=(rectangles_ltrb.length+1);
                            active_box=active_box%rectangles_ltrb.length;
                            draw_active();
                            break;
                        case 99: // c -> edit caption prefix
                            caption_prefix=window.prompt("Object Type",caption_prefix);
                            document.getElementById("CaptionPrefix").innerHTML=caption_prefix;
                            break;
                        case 100: //d -> delete
                            //draw_boxes();
                            if(active_box>=0){
                                deleted_rectangles_ltrb.push(rectangles_ltrb[active_box]);
                                deleted_captions.push(captions[active_box]);
                                rectangles_ltrb.splice(active_box,1);
                                captions.splice(active_box,1);
                                active_box=active_box%rectangles_ltrb.length;
                                draw_boxes();
                                draw_active();
                            }
                            break;
                        case 122: //z -> undo 
                            //draw_boxes();
                            if(deleted_captions.length>0){
                                rectangles_ltrb.push(deleted_rectangles_ltrb.pop());
                                captions.push(deleted_captions.pop());
                                active_box=rectangles_ltrb.length-1;
                                draw_boxes();
                                draw_active();
                            }
                            break;                            
                        case 104: //h -> help
                            alert("h -> help\\nn -> select next box\\nd -> delete word\\nenter -> edit the caption");
                            break;
                        default:
                            alert("Unknown code:"+evt.keyCode);
                    }
                }, false);
            }
            //img.src = "../tmp/Kroniky-zip-vyber/obrazky/soap-ch_00001_mesto-cheb-gradl-siegl-1878-1924-sig603/soap-ch_00001_mesto-cheb-gradl-siegl-1878-1924_0050.jpg";
            img.src = "/{{id}}.jpg";
            $(window).on('load', function() {
                draw_boxes();
                $("#cover").hide();
            });
        });
    </script>
</head>
<body>
<section>
    <div id="cover" style="{position: fixed; height: 100%; width: 100%; top:0; left: 0; background: #000; z-index:9999;}"></div>
    <div id="navigation">
            <H1>Navigation</H1>
            <table>
                <tr><td>
                    <H1><a href="/{{previous_id}}">Previous</a></H1>
                </td><td>
                    <H1><a href="/">Images</a></H1>
                </td><td>
                    <H1><a href="/{{next_id}}">Next</a></H1>
                </td><td>
                    <H1>Object type:</H1>
                </td><td>
                    <div id="CaptionPrefix">W</div>
                </td><td>
                    <H1>Help</H1>
                </td></tr>
            </table>
    </div>
    <div id="canvasesdiv" style="position:relative; width:400px; height:300px">
        <canvas id="layer_image"
            style="z-index: 1;
            position:absolute;
            left:0px;
            top:0px;
            " height="300px" width="400">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
        <canvas id="layer_boxes"
            style="z-index: 2;
            position:absolute;
            l+eft:0px;
            top:0px;
            " height="300px" width="400">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
        <canvas id="layer_active"
            style="z-index: 3;
            position:absolute;
            left:0px;
            top:0px;
            " height="300px" width="400">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
        <canvas id="layer_interactive"
            style="z-index: 4;
            position:absolute;
            left:0px;
            top:0px;
            " height="300px" width="400">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
    </div>
</section>
</body>
</html>
"""

@cherrypy.expose
class StringGeneratorWebService(object):
    def __init__(self,image_list,annotator_template):
        id_paths=[(hashlib.md5(open(img).read()).hexdigest(),img) for img in image_list]
        self.ids=[id_path[0] for id_path in id_paths]
        self.previous_id={self.ids[k]:self.ids[k-1] for k in range(1,len(self.ids))}
        self.previous_id[self.ids[0]]=""
        self.next_id={self.ids[k-1]:self.ids[k] for k in range(1,len(self.ids))}
        self.next_id[self.ids[-1]]=""
        self.id2image_fnames=dict(id_paths)
        self.id2json_fnames={k:v[:v.rfind(".")]+".json" for k,v in self.id2image_fnames.items()}
        #self.json_list=[p[:p.rfind(".")]+".json" for p in image_list]
        self.annotator=jinja2.Template(annotator_template)

    @cherrypy.popargs('id')
    def GET(self, id=""):
        if not id:
            # return all items
            cherrypy.response.headers['Content-Type'] = 'text/html'
            head="<html><body><table><tr><td>"
            tail="</td></tr></html></body></html>"
            body="</td></tr>\n<tr><td>".join(['{}</td><td><a href="{}">{}</a>'.format(k,v,v) for k,v in enumerate(self.ids)])
            return head+body+tail
        else:
            id_split=id.split(".")
            file_type=id_split[0]
            if len(id_split)==1:
                cherrypy.response.headers['Content-Type'] = 'text/html'
                id=id_split[0]
                return self.annotator.render(id=id,prev_id=self.previous_id[id],next_id=self.next_id[id])
            elif id_split[1]=="jpg":
                cherrypy.response.headers['Content-Type'] = "image/jpg"
                return open(self.id2image_fnames[id_split[0]]).read()
            elif id_split[1]=="json":
                cherrypy.response.headers['Content-Type'] = 'application/json'
                try:
                    json_str=open(self.id2json_fnames[id_split[0]]).read()
                    print "Returning real json:", json_str
                    return json_str
                except  IOError: # for python3 FileNotFoundError:
                    print "Returning fake json."
                    return json.dumps({"rectangles_ltrb":[],"captions":[]})
            else:
                print "file_type:",file_type
                raise

    def POST(self, length=8):
        some_string = ''.join(random.sample(string.hexdigits, int(length)))
        cherrypy.session['mystring'] = some_string
        return some_string

    @cherrypy.tools.accept(media='application/json')
    def PUT(self, id):
        id_split=id.split(".")
        print "PUT:" + repr(id)
        cl = cherrypy.request.headers['Content-Length']
        json_string = cherrypy.request.body.read(int(cl))
        try:
            print "ID:",id_split[0]
            print "json fname",self.id2json_fnames
            print "fname=",self.id2json_fnames[id_split[0]]
            print "json_str:",repr(json_string)
            open(self.id2json_fnames[id_split[0]],"w").write(json_string)
        except:
            raise

    def DELETE(self):
        cherrypy.session.pop('mystring', None)


if __name__ == '__main__':
    conf = {
        '/favicon.ico': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': os.path.join(os.path.dirname(os.path.abspath(__file__)), 'favicon.ico'),
            'tools.staticdir.debug': True,
            'log.screen': True
        },
        '/': {
        'request.dispatch': cherrypy.dispatch.MethodDispatcher(),
            'tools.sessions.on': True,
            'tools.response_headers.on': True,
            'tools.response_headers.headers': [('Content-Type', 'text/plain')],
        }
    }
    if len(sys.argv)==1:
        image_list=glob.glob("./*.jpg")
    else:
        image_list=sys.argv[1:]
    print image_list
    cherrypy.quickstart(StringGeneratorWebService(image_list,client_jinja_template), '/', conf)
